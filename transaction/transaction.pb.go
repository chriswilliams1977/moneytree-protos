// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package transaction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Transaction_TransactionType int32

const (
	Transaction_UNKNOWN_TRANSACTION_TYPE Transaction_TransactionType = 0
	Transaction_Withdrawal               Transaction_TransactionType = 1
	Transaction_Deposit                  Transaction_TransactionType = 2
	Transaction_Transfer                 Transaction_TransactionType = 3
)

var Transaction_TransactionType_name = map[int32]string{
	0: "UNKNOWN_TRANSACTION_TYPE",
	1: "Withdrawal",
	2: "Deposit",
	3: "Transfer",
}

var Transaction_TransactionType_value = map[string]int32{
	"UNKNOWN_TRANSACTION_TYPE": 0,
	"Withdrawal":               1,
	"Deposit":                  2,
	"Transfer":                 3,
}

func (x Transaction_TransactionType) String() string {
	return proto.EnumName(Transaction_TransactionType_name, int32(x))
}

func (Transaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0, 0}
}

type Transaction struct {
	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountNumber        string                      `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Type                 Transaction_TransactionType `protobuf:"varint,3,opt,name=type,proto3,enum=moneytree.svc.transaction.Transaction_TransactionType" json:"type,omitempty"`
	Amount               float64                     `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Description          string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Reference            string                      `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	Date                 *timestamp.Timestamp        `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	Uuid                 string                      `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *Transaction) GetType() Transaction_TransactionType {
	if m != nil {
		return m.Type
	}
	return Transaction_UNKNOWN_TRANSACTION_TYPE
}

func (m *Transaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Transaction) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Transaction) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Transaction) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Request struct {
	AccountNumber        string   `protobuf:"bytes,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

type Response struct {
	Created              bool           `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	Transaction          *Transaction   `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc4e03d2c28c490, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *Response) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *Response) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterEnum("moneytree.svc.transaction.Transaction_TransactionType", Transaction_TransactionType_name, Transaction_TransactionType_value)
	proto.RegisterType((*Transaction)(nil), "moneytree.svc.transaction.Transaction")
	proto.RegisterType((*Request)(nil), "moneytree.svc.transaction.Request")
	proto.RegisterType((*Response)(nil), "moneytree.svc.transaction.Response")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_2cc4e03d2c28c490) }

var fileDescriptor_2cc4e03d2c28c490 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0xed, 0x24, 0x69, 0x93, 0xde, 0xad, 0x69, 0x7a, 0x1f, 0x64, 0x0c, 0x05, 0x97, 0x15, 0x25,
	0x2f, 0x6e, 0x34, 0x82, 0xa5, 0xf8, 0x54, 0xab, 0xa8, 0x15, 0xb6, 0xb2, 0x5d, 0x29, 0x16, 0x21,
	0x6c, 0x76, 0x6f, 0x92, 0x81, 0xec, 0xce, 0x3a, 0x33, 0xdb, 0x92, 0x3f, 0xf0, 0x9b, 0xfc, 0x10,
	0xbf, 0x47, 0x3a, 0x69, 0xec, 0x2a, 0xb1, 0xc4, 0xb7, 0xb9, 0x67, 0xee, 0x39, 0x73, 0x38, 0x67,
	0x60, 0xcf, 0xa8, 0x38, 0xd7, 0x71, 0x62, 0x84, 0xcc, 0xfd, 0x42, 0x49, 0x23, 0xf1, 0x41, 0x26,
	0x73, 0x9a, 0x1b, 0x45, 0xe4, 0xeb, 0xcb, 0xc4, 0xaf, 0x2c, 0x74, 0x1f, 0x4e, 0xa4, 0x9c, 0xcc,
	0xa8, 0x6f, 0x17, 0x47, 0xe5, 0xb8, 0x6f, 0x44, 0x46, 0xda, 0xc4, 0x59, 0xb1, 0xe0, 0x7a, 0xdf,
	0xeb, 0xe0, 0x44, 0xb7, 0x04, 0x6c, 0x43, 0x4d, 0xa4, 0x9c, 0xb9, 0xac, 0xb7, 0x19, 0xd6, 0x44,
	0x8a, 0x8f, 0xa1, 0x1d, 0x27, 0x89, 0x2c, 0x73, 0x33, 0xcc, 0xcb, 0x6c, 0x44, 0x8a, 0xd7, 0x5c,
	0xd6, 0xdb, 0x0e, 0xef, 0xdd, 0xa0, 0x81, 0x05, 0xf1, 0x04, 0x1a, 0x66, 0x5e, 0x10, 0xaf, 0xbb,
	0xac, 0xd7, 0x1e, 0xbc, 0xf4, 0xff, 0xe9, 0xc8, 0x8f, 0x56, 0x9f, 0xa3, 0x79, 0x41, 0xa1, 0xd5,
	0xc0, 0xfb, 0xb0, 0x15, 0x67, 0xd7, 0xda, 0xbc, 0xe1, 0xb2, 0x1e, 0x0b, 0x6f, 0x26, 0x74, 0xc1,
	0x49, 0x49, 0x27, 0x4a, 0x14, 0xd7, 0x04, 0xbe, 0x69, 0x7d, 0x54, 0x21, 0xdc, 0x87, 0x6d, 0x45,
	0x63, 0x52, 0x94, 0x27, 0xc4, 0xb7, 0xec, 0xfd, 0x2d, 0x80, 0x3e, 0x34, 0xd2, 0xd8, 0x10, 0x6f,
	0xba, 0xac, 0xe7, 0x0c, 0xba, 0xfe, 0x22, 0x1a, 0x7f, 0x19, 0x8d, 0x1f, 0x2d, 0xa3, 0x09, 0xed,
	0x1e, 0x22, 0x34, 0xca, 0x52, 0xa4, 0xbc, 0x65, 0x85, 0xec, 0xd9, 0xbb, 0x80, 0xdd, 0xbf, 0x4c,
	0xe3, 0x3e, 0xf0, 0xcf, 0xc1, 0xc7, 0xe0, 0xf4, 0x3c, 0x18, 0x46, 0xe1, 0x51, 0x70, 0x76, 0x74,
	0x1c, 0x7d, 0x38, 0x0d, 0x86, 0xd1, 0x97, 0x4f, 0x6f, 0x3b, 0x1b, 0xd8, 0x06, 0x38, 0x17, 0x66,
	0x9a, 0xaa, 0xf8, 0x2a, 0x9e, 0x75, 0x18, 0x3a, 0xd0, 0x7c, 0x43, 0x85, 0xd4, 0xc2, 0x74, 0x6a,
	0xb8, 0x03, 0x2d, 0xab, 0x36, 0x26, 0xd5, 0xa9, 0x7b, 0xcf, 0xa0, 0x19, 0xd2, 0xb7, 0x92, 0xb4,
	0x59, 0x91, 0x3a, 0x5b, 0x91, 0xba, 0xf7, 0x83, 0x41, 0x2b, 0x24, 0x5d, 0xc8, 0x5c, 0x13, 0x72,
	0x68, 0x26, 0x8a, 0x62, 0x43, 0x8b, 0xfa, 0x5a, 0xe1, 0x72, 0xc4, 0xf7, 0xe0, 0x54, 0x1a, 0xb0,
	0x05, 0x3a, 0x83, 0x27, 0xeb, 0x75, 0x14, 0x56, 0xa9, 0x78, 0x02, 0x3b, 0x95, 0x51, 0xf3, 0xba,
	0x5b, 0xff, 0x0f, 0xa9, 0x3f, 0xb8, 0x83, 0x9f, 0x0c, 0xb0, 0x72, 0x7b, 0x46, 0xea, 0x52, 0x24,
	0x84, 0x23, 0xd8, 0x3b, 0xb6, 0xbe, 0xab, 0xbf, 0x72, 0xcd, 0x17, 0xba, 0x8f, 0xee, 0xd8, 0x5b,
	0x06, 0xe5, 0x6d, 0xe0, 0x57, 0xd8, 0x7d, 0x47, 0xa6, 0x42, 0xd4, 0xe8, 0xdd, 0xc9, 0xb4, 0xad,
	0xac, 0xa9, 0xfe, 0xfa, 0xd5, 0xc5, 0xe1, 0x44, 0x98, 0x69, 0x39, 0xf2, 0x13, 0x99, 0xf5, 0x93,
	0xa9, 0x12, 0xfa, 0x4a, 0xcc, 0x66, 0x22, 0xce, 0xf4, 0xf3, 0xc3, 0x83, 0x83, 0xfe, 0x6f, 0x91,
	0xa7, 0xf6, 0xeb, 0xe9, 0x7e, 0x45, 0x67, 0xb4, 0x65, 0xb1, 0x17, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x78, 0x41, 0x42, 0x63, 0xe7, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TransactionService service

type TransactionServiceClient interface {
	CreateTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*Response, error)
	GetTransactions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type transactionServiceClient struct {
	c           client.Client
	serviceName string
}

func NewTransactionServiceClient(serviceName string, c client.Client) TransactionServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "moneytree.svc.transaction"
	}
	return &transactionServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "TransactionService.CreateTransaction", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactions(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "TransactionService.GetTransactions", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransactionService service

type TransactionServiceHandler interface {
	CreateTransaction(context.Context, *Transaction, *Response) error
	GetTransactions(context.Context, *Request, *Response) error
}

func RegisterTransactionServiceHandler(s server.Server, hdlr TransactionServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TransactionService{hdlr}, opts...))
}

type TransactionService struct {
	TransactionServiceHandler
}

func (h *TransactionService) CreateTransaction(ctx context.Context, in *Transaction, out *Response) error {
	return h.TransactionServiceHandler.CreateTransaction(ctx, in, out)
}

func (h *TransactionService) GetTransactions(ctx context.Context, in *Request, out *Response) error {
	return h.TransactionServiceHandler.GetTransactions(ctx, in, out)
}
